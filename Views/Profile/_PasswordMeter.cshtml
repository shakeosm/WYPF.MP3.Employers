@model string
@{
    //## The result will come in a ';' seperated list. $"{scoreText};{currentScore};{scoreToPass}";
    var passwordMeterList = Model.Split(';');
    string strengthText = passwordMeterList[0];
    _ = Int16.TryParse(passwordMeterList[1], out short currentScore);
    _ = Int16.TryParse(passwordMeterList[2], out short scoreToPass);

    string progressbarCss = "weak";
    int progressbarWidth = 0;
    
    switch (strengthText.ToLower())
    {
        case "weak":
            progressbarCss = "bg-danger";
            progressbarWidth = 100; //## means 100% weak
            break;
        case "medium":
            progressbarCss = "bg-warning";
            progressbarWidth = 50;
            break;
        case "strong":
            progressbarCss = "bg-info";
            progressbarWidth = 75;
            break;
        case "very strong":
            progressbarCss = "bg-success";
            progressbarWidth = 100;
            break;
        default:
            progressbarCss = "bg-danger";
            progressbarWidth = 10;
            break;
    }
}

<div class="m-0 p-0 text-center">
    <span id="PasswordStrengthText">@strengthText</span>

    <div class="progress" style="height: 5px;">
        <div class="progress-bar @progressbarCss" role="progressbar" aria-label="Password strength Meter" style="width: @progressbarWidth%" aria-valuenow="@progressbarWidth" aria-valuemin="0" aria-valuemax="100"></div>
        @* <div class="progress-bar @progressbarCss" role="progressbar" aria-label="Password strength Meter" style="width: @currentScore%" aria-valuenow="@currentScore" aria-valuemin="0" aria-valuemax="100"></div> *@
    </div>

</div>